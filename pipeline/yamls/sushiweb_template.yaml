apiVersion: template.openshift.io/v1
kind: Template
metadata:
  labels:
    app: suwhiweb
  name: sushiweb
objects: 
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      progressDeadlineSeconds: 600
      replicas: 1
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          deployment: ${APP_NAME}
      strategy:
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
      template:
        metadata:
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
          creationTimestamp: null
          labels:
            deployment: ${APP_NAME}
        spec:
          containers:
          - image: ${IMAGE}
            readinessProbe:
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            livenessProbe:
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            startupProbe:
              httpGet:
                path: /
                port: 8080
                scheme: HTTP
              timeoutSeconds: 1
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
            - containerPort: 8080
              protocol: TCP
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deployment: ${APP_NAME}
      sessionAffinity: None
      type: ClusterIP
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: ${APP_NAME}
        weight: 100
      wildcardPolicy: None
  - apiVersion: triggers.tekton.dev/v1alpha1
    kind: TriggerBinding
    metadata:
      name: github-withref-push
    spec:
      params:
        - name: git-ref
          value: $(body.ref)
        - name: git-revision
          value: $(body.head_commit.id)
        - name: git-commit-message
          value: $(body.head_commit.message)
        - name: git-repo-url
          value: $(body.repository.url)
        - name: git-repo-name
          value: $(body.repository.name)
        - name: content-type
          value: $(header.Content-Type)
        - name: pusher-name
          value: $(body.pusher.name)
        - name: branch
          value: $(extensions.branch_name)
  - apiVersion: triggers.tekton.dev/v1alpha1
    kind: TriggerBinding
    metadata:
      name: github-withref-newtag
    spec:
      params:
        - name: git-ref
          value: $(body.ref)
        - name: git-revision
          value: $(body.head_commit.id)
        - name: git-commit-message
          value: $(body.head_commit.message)
        - name: git-repo-url
          value: $(body.repository.url)
        - name: git-repo-name
          value: $(body.repository.name)
        - name: content-type
          value: $(header.Content-Type)
        - name: pusher-name
          value: $(body.pusher.name)
        - name: tag
          value: $(extensions.tag_name)
  - apiVersion: triggers.tekton.dev/v1alpha1
    kind: EventListener
    metadata:
      name: event-listener-${APP_NAME}
      finalizers:
        - eventlisteners.triggers.tekton.dev
    spec:
      namespaceSelector: {}
      podTemplate: {}
      resources: {}
      serviceAccountName: pipeline
      triggers:
        - bindings:
            - kind: TriggerBinding
              ref: github-withref-push
          interceptors:
            - cel:
              filter: 'has(body.ref) && body.ref.split(''/'')[2] == ''${GIT_REVISION}'''
              overlays:
                - expression: 'body.ref.split(''/'')[2]'
                  key: branch_name
          name: build-on-branch
          template:
            ref: trigger-template-${APP_NAME}-git
        - bindings:
            - kind: TriggerBinding
              ref: github-withref-newtag
          interceptors:
            - cel:
              filter: 'has(body.ref) && body.ref.split(''/'')[1] == ''tags'''
              overlays:
                - expression: 'body.ref.split(''/'')[2]'
                  key: tag_name
          name: build-on-tag
          template:
            ref: trigger-template-${APP_NAME}-git 
  - apiVersion: triggers.tekton.dev/v1alpha1
    kind: TriggerTemplate
    metadata:
      name: trigger-template-${APP_NAME}-git
    spec:
      params:
        - name: git-revision
        - name: git-commit-message
        - name: git-repo-url
        - name: git-repo-name
        - name: content-type
        - name: pusher-name
      resourcetemplates:
        - apiVersion: tekton.dev/v1beta1
          kind: PipelineRun
          metadata:
            annotations: {}
            generateName: ${APP_NAME}-git-
            labels:
              pipeline.openshift.io/strategy: docker
              pipeline.openshift.io/type: kubernetes
              tekton.dev/pipeline: ${APP_NAME}-build-git
          spec:
            params:
              - name: APP_NAME
                value: ${APP_NAME}
              - name: GIT_REPO
                value: ${GIT_REPO}
              - name: GIT_REVISION
                value: ${GIT_REVISION}
              - name: IMAGE_NAME
                value: ${IMAGE}
              - name: PATH_CONTEXT
                value: ${PATH_CONTEXT}
              - name: TEST_IMAGE
                value: ${TEST_IMAGE}
            pipelineRef:
              name: ${APP_NAME}-build-git
            resources: []
            status: null
            workspaces:
              - name: workspace
                volumeClaimTemplate:
                  metadata:
                    creationTimestamp: null
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Gi
                    storageClassName: nfs-storage-provisioner
                    volumeMode: Filesystem
                  status: {}
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: smeeclient-${APP_NAME}
      labels:
        app: smeeclient-${APP_NAME}
        app.kubernetes.io/component: smeeclient-${APP_NAME}
        app.kubernetes.io/instance: smeeclient-${APP_NAME}
        app.kubernetes.io/part-of: Triggers
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: smeeclient-${APP_NAME}
      template:
        metadata:
          labels:
            deployment: smeeclient-${APP_NAME}
        spec:
          containers:
            - resources: {}
              terminationMessagePath: /dev/termination-log
              name: smeeclient
              env:
                - name: SMEESOURCE
                  value: ${SMEESOURCE}
                - name: HTTPTARGET
                  value: 'http://el-event-listener-${APP_NAME}:8080'
                - name: NODE_TLS_REJECT_UNAUTHORIZED
                  value: '0'
              ports:
                - containerPort: 8080
                  protocol: TCP
              imagePullPolicy: IfNotPresent
              terminationMessagePolicy: File
              image: quay.io/schabrolles/smeeclient_ppc64le:pipeline
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
      revisionHistoryLimit: 10
      progressDeadlineSeconds: 600
  - apiVersion: tekton.dev/v1beta1
    kind: Pipeline
    metadata:
      name: sushiweb-build-git
      labels:
        pipeline.openshift.io/strategy: docker
        pipeline.openshift.io/type: kubernetes
    spec:
      params:
        - default: ${APP_NAME}
          name: APP_NAME
          type: string
        - default: ${GIT_REPO}
          name: GIT_REPO
          type: string
        - default: ${GIT_REVISION}
          name: GIT_REVISION
          type: string
        - default: ${IMAGE}
          name: IMAGE_NAME
          type: string
        - default: ${PATH_CONTEXT}
          name: PATH_CONTEXT
          type: string
        - default: ${TEST_IMAGE}
          name: TEST_IMAGE
          type: string
      tasks:
        - name: fetch-repository
          params:
            - name: url
              value: $(params.GIT_REPO)
            - name: revision
              value: $(params.GIT_REVISION)
            - name: deleteExisting
              value: 'true'
          taskRef:
            kind: ClusterTask
            name: git-clone
          workspaces:
            - name: output
              workspace: workspace
        - name: build
          params:
            - name: IMAGE
              value: $(params.TEST_IMAGE)
            - name: TLSVERIFY
              value: 'false'
            - name: CONTEXT
              value: $(params.PATH_CONTEXT)
          runAfter:
            - fetch-repository
          taskRef:
            kind: ClusterTask
            name: buildah
          workspaces:
            - name: source
              workspace: workspace
        - name: deploy-test-image
          params:
            - name: SCRIPT
              value: oc new-app --name $(params.APP_NAME)-test $(params.TEST_IMAGE)
          runAfter:
            - build
          taskRef:
            kind: ClusterTask
            name: openshift-client
        - name: test
          params:
            - name: appName
              value: >-
                curl -I $(params.APP_NAME)-test:8080 && curl -I
                $(params.APP_NAME)-test:8080/menu.html && curl -I
                $(params.APP_NAME)-test:8080/blog.html && curl -I
                $(params.APP_NAME)-test:8080/about.html
          runAfter:
            - deploy-test-image
          taskRef:
            kind: Task
            name: ubi8
        - name: remove-test-image
          params:
            - name: SCRIPT
              value: oc delete svc,deploy $(params.APP_NAME)-test
          runAfter:
            - test
          taskRef:
            kind: ClusterTask
            name: openshift-client
        - name: skopeo-copy
          params:
            - name: srcImageURL
              value: 'docker://$(params.TEST_IMAGE)'
            - name: destImageURL
              value: 'docker://$(params.IMAGE_NAME)'
            - name: srcTLSverify
              value: 'false'
            - name: destTLSverify
              value: 'true'
          runAfter:
            - test
          taskRef:
            kind: ClusterTask
            name: skopeo-copy
          workspaces:
            - name: images-url
              workspace: workspace
        - name: deploy
          params:
            - name: SCRIPT
              value: oc rollout restart deployment/$(params.APP_NAME)
          runAfter:
            - skopeo-copy
          taskRef:
            kind: ClusterTask
            name: openshift-client
        - name: wait-rollout
          params:
            - name: SCRIPT
              value: oc rollout status deployment/$(params.APP_NAME)
          runAfter:
            - deploy
          taskRef:
            kind: ClusterTask
            name: openshift-client
      workspaces:
        - name: workspace
parameters:
  - description: Application name
    name: APP_NAME
    value: sushiweb
  - description: Git repository for source
    name: GIT_REPO
    value: https://github.com/schabrolles/sushiweb.git
  - description:
    name: GIT_REVISION
    value: master
  - description: Path context where Dockerfile resides
    name: PATH_CONTEXT
    value: .
  - description: Test Image
    name: TEST_IMAGE
    value: image-registry.openshift-image-registry.svc:5000/my_project/sushiweb-test
  - description: Production Image
    name: IMAGE
    value: image-registry.openshift-image-registry.svc:5000/my_project/sushiweb
  - description: smee URL to monitor
    name: SMEESOURCE
    value: https://smee.io/Gux6po61ZNiNcxLQ
