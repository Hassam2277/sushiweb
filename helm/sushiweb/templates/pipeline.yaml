apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: sushiweb-build-git
  labels:
    pipeline.openshift.io/strategy: docker
    pipeline.openshift.io/type: kubernetes
spec:
  params:
    - default: {{ include "sushiweb.fullname" . }}
      name: APP_NAME
      type: string
    - default: {{ .Values.git.repository }}
      name: GIT_REPO
      type: string
    - default: {{ .Values.git.revision }}
      name: GIT_REVISION
      type: string
    - default: "{{ .Values.image.repository }}"
      name: IMAGE_NAME
      type: string
    - default: {{ .Values.git.context }}
      name: PATH_CONTEXT
      type: string
    - default: "{{ .Values.image.repository }}-test"
      name: TEST_IMAGE
      type: string
    - default: "{{ .Values.image.tag | default .Chart.AppVersion }}"
      name: IMAGE_TAG
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: deleteExisting
          value: 'true'
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: build
      params:
        - name: IMAGE
          value: $(params.TEST_IMAGE):$(params.IMAGE_TAG)
        - name: TLSVERIFY
          value: 'false'
        - name: CONTEXT
          value: $(params.PATH_CONTEXT)
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: workspace
    - name: deploy-test-image
      params:
        - name: SCRIPT
          value: oc new-app --name $(params.APP_NAME)-test $(params.TEST_IMAGE):$(params.IMAGE_TAG)
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: test
      params:
        - name: appName
          value: >-
            curl -I $(params.APP_NAME)-test:8080 && curl -I
            $(params.APP_NAME)-test:8080/menu.html && curl -I
            $(params.APP_NAME)-test:8080/blog.html && curl -I
            $(params.APP_NAME)-test:8080/about.html
      runAfter:
        - deploy-test-image
      taskRef:
        kind: Task
        name: ubi8
    - name: remove-test-image
      params:
        - name: SCRIPT
          value: oc delete svc,deploy $(params.APP_NAME)-test
      runAfter:
        - test
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: skopeo-copy
      params:
        - name: srcImageURL
          value: 'docker://$(params.TEST_IMAGE):$(params.IMAGE_TAG)'
        - name: destImageURL
          value: 'docker://$(params.IMAGE_NAME):$(params.IMAGE_TAG)'
        - name: srcTLSverify
          value: 'false'
        - name: destTLSverify
          value: 'false'
      runAfter:
        - test
      taskRef:
        kind: ClusterTask
        name: skopeo-copy
      workspaces:
        - name: images-url
          workspace: workspace
    - name: patch-deployment
      params:
        - name: SCRIPT
          value: >-
            oc patch deployment/$(params.APP_NAME) --type='json' -p='[{"op":
            "replace", "path": "/spec/template/spec/containers/0/image",
            "value": "$(params.IMAGE_NAME):$(params.IMAGE_TAG)"}]'
        - name: VERSION
          value: latest
      runAfter:
        - skopeo-copy
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: deploy
      params:
        - name: SCRIPT
          value: oc rollout restart deployment/$(params.APP_NAME)
      runAfter:
        - patch-deployment
      taskRef:
        kind: ClusterTask
        name: openshift-client
    - name: wait-rollout
      params:
        - name: SCRIPT
          value: oc rollout status deployment/$(params.APP_NAME)
      runAfter:
        - deploy
      taskRef:
        kind: ClusterTask
        name: openshift-client
  workspaces:
    - name: workspace